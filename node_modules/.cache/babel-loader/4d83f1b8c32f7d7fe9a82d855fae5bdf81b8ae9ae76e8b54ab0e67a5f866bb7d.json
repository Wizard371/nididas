{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { getAuth, signInWithEmailAndPassword, GoogleAuthProvider, signInWithPopup, FacebookAuthProvider, createUserWithEmailAndPassword, sendEmailVerification } from \"firebase/auth\";\nimport { getFirestore, doc, setDoc } from \"firebase/firestore\";\nimport router from \"@/router\";\nexport default {\n  data() {\n    return {\n      email: \"\",\n      password: \"\",\n      repeatPassword: \"\",\n      error: \"\",\n      isRightPanelActive: false,\n      message: \"\",\n      type: \"success\"\n    };\n  },\n  methods: {\n    startEmailVerificationCheck(user) {\n      const checkInterval = 2000; // 2 seconds\n\n      const intervalId = setInterval(() => {\n        user.reload().then(() => {\n          if (user.emailVerified) {\n            this.$toast.success(\"Konto oprettelse færdig!\");\n            clearInterval(intervalId); // Stop checking\n            router.push(\"/konto\");\n          }\n        });\n      }, checkInterval);\n    },\n    async loginWithGoogle() {\n      const provider = new GoogleAuthProvider();\n      const auth = getAuth();\n      try {\n        const result = await signInWithPopup(auth, provider);\n        if (result.user) {\n          // Save user data to Firestore\n          const db = getFirestore();\n          const userRef = doc(db, \"users\", result.user.uid);\n          await setDoc(userRef, {\n            email: result.user.email,\n            uuid: result.user.uid,\n            role: \"user\",\n            timestamp: new Date()\n          });\n          router.push(\"/konto\");\n          console.log(\"Loggede ind med Google:\", result.user);\n          this.$toast.success(\"Loggede ind med Google!\");\n        }\n      } catch (error) {\n        console.error(\"Kunne ikke logge ind med Google:\", error.message);\n        let errorMessage;\n        switch (error.code) {\n          case \"auth/popup-closed-by-user\":\n            errorMessage = \"Login vinduet blev lukket. Prøv igen.\";\n            break;\n          default:\n            errorMessage = error.message + \"Bed en administrator om at tilføje denne fejl kode.\";\n        }\n        this.$toast.error(errorMessage);\n      }\n    },\n    async loginWithFacebook() {\n      const provider = new FacebookAuthProvider();\n      const auth = getAuth();\n      try {\n        const result = await signInWithPopup(auth, provider);\n        if (result.user) {\n          // Save user data to Firestore\n          const db = getFirestore();\n          const userRef = doc(db, \"users\", result.user.uid);\n          await setDoc(userRef, {\n            email: result.user.email,\n            uuid: result.user.uid,\n            role: \"user\",\n            timestamp: new Date()\n          });\n          router.push(\"/konto\");\n          console.log(\"Loggede ind med facebook:\", result.user);\n          this.$toast.success(\"Loggede ind med facebook!\");\n        }\n      } catch (error) {\n        console.error(\"Kunne ikke logge ind med Facebook:\", error.message);\n        let errorMessage;\n        switch (error.code) {\n          case \"auth/popup-closed-by-user\":\n            errorMessage = \"Login vinduet blev lukket. Prøv igen.\";\n            break;\n          default:\n            errorMessage = error.message + \"Bed en administrator om at tilføje denne fejl kode.\";\n        }\n        this.$toast.error(errorMessage);\n      }\n    },\n    loginWithEmail() {\n      const auth = getAuth();\n      signInWithEmailAndPassword(auth, this.email, this.password).then(userCredential => {\n        const user = userCredential.user;\n        router.push(\"/konto\");\n        console.log(\"Loggede ind:\", user);\n      }).catch(error => {\n        console.error(\"Fejl ved login:\", error.message);\n        let errorMessage;\n        switch (error.code) {\n          case \"auth/invalid-email\":\n            errorMessage = \"Ugyldig e-mailadresse.\";\n            break;\n          case \"auth/user-disabled\":\n            errorMessage = \"Brugerkontoen er deaktiveret.\";\n            break;\n          case \"auth/user-not-found\":\n            errorMessage = \"Ingen konto matcher denne e-mail.\";\n            break;\n          case \"auth/wrong-password\":\n            errorMessage = \"Forkert kodeord. Prøv igen.\";\n            break;\n          case \"auth/invalid-login-credentials\":\n            errorMessage = \"Ugyldig e-mailadresse eller kodeord.\";\n            break;\n          case \"auth/too-many-requests\":\n            errorMessage = \"For mange forsøg. Prøv igen senere.\";\n            break;\n          default:\n            errorMessage = \"En fejl opstod ved login. Prøv igen.\";\n        }\n        this.$toast.error(errorMessage);\n      });\n    },\n    toggleSignUp() {\n      this.isRightPanelActive = true;\n    },\n    toggleSignIn() {\n      this.isRightPanelActive = false;\n    },\n    createUser() {\n      if (this.password !== this.repeatPassword) {\n        this.$toast.error(\"De 2 kodeord er ikke ens!\");\n        return;\n      }\n      if (!this.isPasswordStrong(this.password)) {\n        this.$toast.error(\"Kodeord er for svagt. Det skal mindst være 8 karaktere langt, have et stort bogstav, et lille bogstav, et tal og en speciel karakter.\");\n        return;\n      }\n      const auth = getAuth();\n      createUserWithEmailAndPassword(auth, this.email, this.password).then(async userCredential => {\n        const user = userCredential.user;\n\n        // store additional data in firestore\n        const db = getFirestore();\n        const userRef = doc(db, \"users\", user.uid); // assuming you have a 'users' collection\n\n        await setDoc(userRef, {\n          email: this.email,\n          uuid: user.uid,\n          role: \"user\",\n          timestamp: new Date() // this saves the current date and time\n        });\n\n        sendEmailVerification(user);\n        this.$toast.info(\"Verifikations mail er sendt!\");\n        this.startEmailVerificationCheck(user);\n      }).catch(error => {\n        console.error(\"Fejl med at logge ind:\", error.message);\n        let errorMessage;\n        switch (error.code) {\n          case \"auth/invalid-email\":\n            errorMessage = \"Ugyldig e-mailadresse.\";\n            break;\n          case \"auth/user-disabled\":\n            errorMessage = \"Brugerkontoen er deaktiveret.\";\n            break;\n          case \"auth/user-not-found\":\n            errorMessage = \"Kunne ikke finde e-mail eller brugernavn.\";\n            break;\n          case \"auth/wrong-password\":\n            errorMessage = \"Forkert kodeord. Prøv igen.\";\n            break;\n          case \"auth/email-already-in-use\":\n            errorMessage = \"E-mailadressen er allerede i brug.\";\n            break;\n          case \"auth/operation-not-allowed\":\n            errorMessage = \"Operationen er ikke tilladt.\";\n            break;\n          case \"auth/too-many-requests\":\n            errorMessage = \"For mange anmodninger. Prøv igen senere.\";\n            break;\n          case \"auth/weak-password\":\n            errorMessage = \"Kodeordet er for svagt.\";\n            break;\n          default:\n            errorMessage = \"En ukendt fejl opstod. Prøv igen.\";\n        }\n        this.$toast.error(errorMessage);\n      });\n    },\n    isPasswordStrong(password) {\n      const regex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/;\n      return regex.test(password);\n    }\n  }\n};","map":{"version":3,"names":["getAuth","signInWithEmailAndPassword","GoogleAuthProvider","signInWithPopup","FacebookAuthProvider","createUserWithEmailAndPassword","sendEmailVerification","getFirestore","doc","setDoc","router","data","email","password","repeatPassword","error","isRightPanelActive","message","type","methods","startEmailVerificationCheck","user","checkInterval","intervalId","setInterval","reload","then","emailVerified","$toast","success","clearInterval","push","loginWithGoogle","provider","auth","result","db","userRef","uid","uuid","role","timestamp","Date","console","log","errorMessage","code","loginWithFacebook","loginWithEmail","userCredential","catch","toggleSignUp","toggleSignIn","createUser","isPasswordStrong","info","regex","test"],"sources":["src/views/LoginPage.vue"],"sourcesContent":["<template>\r\n  <div class=\"wrapper\">\r\n    <div v-if=\"message\" :class=\"['notification', type]\">\r\n      {{ message }}\r\n    </div>\r\n    <div\r\n      class=\"container\"\r\n      :class=\"{ 'right-panel-active': isRightPanelActive }\"\r\n      id=\"container\"\r\n    >\r\n      <div class=\"form-container sign-up-container\">\r\n        <form @submit.prevent=\"createUser\">\r\n          <h1>Opret Bruger</h1>\r\n          <div class=\"social-container\">\r\n            <a href=\"#\" class=\"social\" @click=\"loginWithFacebook\"\r\n              ><i class=\"fab fa-facebook-f\"></i\r\n            ></a>\r\n            <a href=\"#\" class=\"social\" @click=\"loginWithGoogle\"\r\n              ><i class=\"fab fa-google-plus-g\"></i\r\n            ></a>\r\n          </div>\r\n          <span>eller brug din email til at oprette en ny bruger</span>\r\n          <input type=\"email\" v-model=\"email\" placeholder=\"Email\" />\r\n          <input type=\"password\" v-model=\"password\" placeholder=\"Kodeord\" />\r\n          <input\r\n            type=\"password\"\r\n            v-model=\"repeatPassword\"\r\n            placeholder=\"Gentag Kodeord\"\r\n          />\r\n          <p v-if=\"error\">{{ error }}</p>\r\n          <button type=\"submit\">Opret Bruger</button>\r\n        </form>\r\n      </div>\r\n      <div class=\"form-container sign-in-container\">\r\n        <form action=\"#\">\r\n          <h1>Log Ind</h1>\r\n          <div class=\"social-container\">\r\n            <a href=\"#\" class=\"social\" @click=\"loginWithFacebook\"\r\n              ><i class=\"fab fa-facebook-f\"></i\r\n            ></a>\r\n            <a href=\"#\" class=\"social\" @click=\"loginWithGoogle\"\r\n              ><i class=\"fab fa-google-plus-g\"></i\r\n            ></a>\r\n          </div>\r\n          <span>eller brug din email</span>\r\n          <input type=\"email\" v-model=\"email\" placeholder=\"Email\" />\r\n          <input type=\"password\" v-model=\"password\" placeholder=\"Password\" />\r\n          <a href=\"#\" id=\"nederenGlemtDitPassword\">Glemt dit password?</a>\r\n          <button @click=\"loginWithEmail\">Log Ind</button>\r\n        </form>\r\n      </div>\r\n      <div class=\"overlay-container\">\r\n        <div class=\"overlay\">\r\n          <div class=\"overlay-panel overlay-left\">\r\n            <h1>Velkommen tilbage!</h1>\r\n            <p>For at få mest ud af din købsoplevelse, log ind på din konto.</p>\r\n            <button class=\"ghost\" @click=\"toggleSignIn\" id=\"signIn\">\r\n              Log Ind\r\n            </button>\r\n          </div>\r\n          <div class=\"overlay-panel overlay-right\">\r\n            <h1>Hej</h1>\r\n            <p>Opret en bruger for at få mest ud af dit køb ved os!</p>\r\n            <button class=\"ghost\" @click=\"toggleSignUp\" id=\"signUp\">\r\n              Opret Bruger\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport {\r\n  getAuth,\r\n  signInWithEmailAndPassword,\r\n  GoogleAuthProvider,\r\n  signInWithPopup,\r\n  FacebookAuthProvider,\r\n  createUserWithEmailAndPassword,\r\n  sendEmailVerification,\r\n} from \"firebase/auth\";\r\nimport { getFirestore, doc, setDoc } from \"firebase/firestore\";\r\nimport router from \"@/router\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      email: \"\",\r\n      password: \"\",\r\n      repeatPassword: \"\",\r\n      error: \"\",\r\n      isRightPanelActive: false,\r\n      message: \"\",\r\n      type: \"success\",\r\n    };\r\n  },\r\n  methods: {\r\n    startEmailVerificationCheck(user) {\r\n      const checkInterval = 2000; // 2 seconds\r\n\r\n      const intervalId = setInterval(() => {\r\n        user.reload().then(() => {\r\n          if (user.emailVerified) {\r\n            this.$toast.success(\"Konto oprettelse færdig!\");\r\n            clearInterval(intervalId); // Stop checking\r\n            router.push(\"/konto\");\r\n          }\r\n        });\r\n      }, checkInterval);\r\n    },\r\n    async loginWithGoogle() {\r\n      const provider = new GoogleAuthProvider();\r\n      const auth = getAuth();\r\n      try {\r\n        const result = await signInWithPopup(auth, provider);\r\n        if (result.user) {\r\n          // Save user data to Firestore\r\n          const db = getFirestore();\r\n          const userRef = doc(db, \"users\", result.user.uid);\r\n          await setDoc(userRef, {\r\n            email: result.user.email,\r\n            uuid: result.user.uid,\r\n            role: \"user\",\r\n            timestamp: new Date(),\r\n          });\r\n\r\n          router.push(\"/konto\");\r\n          console.log(\"Loggede ind med Google:\", result.user);\r\n          this.$toast.success(\"Loggede ind med Google!\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Kunne ikke logge ind med Google:\", error.message);\r\n        let errorMessage;\r\n        switch (error.code) {\r\n          case \"auth/popup-closed-by-user\":\r\n            errorMessage = \"Login vinduet blev lukket. Prøv igen.\";\r\n            break;\r\n          default:\r\n            errorMessage =\r\n              error.message +\r\n              \"Bed en administrator om at tilføje denne fejl kode.\";\r\n        }\r\n        this.$toast.error(errorMessage);\r\n      }\r\n    },\r\n\r\n    async loginWithFacebook() {\r\n      const provider = new FacebookAuthProvider();\r\n      const auth = getAuth();\r\n      try {\r\n        const result = await signInWithPopup(auth, provider);\r\n        if (result.user) {\r\n          // Save user data to Firestore\r\n          const db = getFirestore();\r\n          const userRef = doc(db, \"users\", result.user.uid);\r\n          await setDoc(userRef, {\r\n            email: result.user.email,\r\n            uuid: result.user.uid,\r\n            role: \"user\",\r\n            timestamp: new Date(),\r\n          });\r\n\r\n          router.push(\"/konto\");\r\n          console.log(\"Loggede ind med facebook:\", result.user);\r\n          this.$toast.success(\"Loggede ind med facebook!\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Kunne ikke logge ind med Facebook:\", error.message);\r\n        let errorMessage;\r\n        switch (error.code) {\r\n          case \"auth/popup-closed-by-user\":\r\n            errorMessage = \"Login vinduet blev lukket. Prøv igen.\";\r\n            break;\r\n          default:\r\n            errorMessage =\r\n              error.message +\r\n              \"Bed en administrator om at tilføje denne fejl kode.\";\r\n        }\r\n        this.$toast.error(errorMessage);\r\n      }\r\n    },\r\n\r\n    loginWithEmail() {\r\n      const auth = getAuth();\r\n      signInWithEmailAndPassword(auth, this.email, this.password)\r\n        .then((userCredential) => {\r\n          const user = userCredential.user;\r\n          router.push(\"/konto\");\r\n          console.log(\"Loggede ind:\", user);\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Fejl ved login:\", error.message);\r\n\r\n          let errorMessage;\r\n          switch (error.code) {\r\n            case \"auth/invalid-email\":\r\n              errorMessage = \"Ugyldig e-mailadresse.\";\r\n              break;\r\n            case \"auth/user-disabled\":\r\n              errorMessage = \"Brugerkontoen er deaktiveret.\";\r\n              break;\r\n            case \"auth/user-not-found\":\r\n              errorMessage = \"Ingen konto matcher denne e-mail.\";\r\n              break;\r\n            case \"auth/wrong-password\":\r\n              errorMessage = \"Forkert kodeord. Prøv igen.\";\r\n              break;\r\n            case \"auth/invalid-login-credentials\":\r\n              errorMessage = \"Ugyldig e-mailadresse eller kodeord.\";\r\n              break;\r\n            case \"auth/too-many-requests\":\r\n              errorMessage = \"For mange forsøg. Prøv igen senere.\";\r\n              break;\r\n            default:\r\n              errorMessage = \"En fejl opstod ved login. Prøv igen.\";\r\n          }\r\n\r\n          this.$toast.error(errorMessage);\r\n        });\r\n    },\r\n\r\n    toggleSignUp() {\r\n      this.isRightPanelActive = true;\r\n    },\r\n\r\n    toggleSignIn() {\r\n      this.isRightPanelActive = false;\r\n    },\r\n    createUser() {\r\n      if (this.password !== this.repeatPassword) {\r\n        this.$toast.error(\"De 2 kodeord er ikke ens!\");\r\n\r\n        return;\r\n      }\r\n\r\n      if (!this.isPasswordStrong(this.password)) {\r\n        this.$toast.error(\r\n          \"Kodeord er for svagt. Det skal mindst være 8 karaktere langt, have et stort bogstav, et lille bogstav, et tal og en speciel karakter.\"\r\n        );\r\n\r\n        return;\r\n      }\r\n\r\n      const auth = getAuth();\r\n      createUserWithEmailAndPassword(auth, this.email, this.password)\r\n        .then(async (userCredential) => {\r\n          const user = userCredential.user;\r\n\r\n          // store additional data in firestore\r\n          const db = getFirestore();\r\n          const userRef = doc(db, \"users\", user.uid); // assuming you have a 'users' collection\r\n\r\n          await setDoc(userRef, {\r\n            email: this.email,\r\n            uuid: user.uid,\r\n            role: \"user\",\r\n            timestamp: new Date(), // this saves the current date and time\r\n          });\r\n\r\n          sendEmailVerification(user);\r\n          this.$toast.info(\"Verifikations mail er sendt!\");\r\n          this.startEmailVerificationCheck(user);\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Fejl med at logge ind:\", error.message);\r\n          let errorMessage;\r\n          switch (error.code) {\r\n            case \"auth/invalid-email\":\r\n              errorMessage = \"Ugyldig e-mailadresse.\";\r\n              break;\r\n            case \"auth/user-disabled\":\r\n              errorMessage = \"Brugerkontoen er deaktiveret.\";\r\n              break;\r\n            case \"auth/user-not-found\":\r\n              errorMessage = \"Kunne ikke finde e-mail eller brugernavn.\";\r\n              break;\r\n            case \"auth/wrong-password\":\r\n              errorMessage = \"Forkert kodeord. Prøv igen.\";\r\n              break;\r\n            case \"auth/email-already-in-use\":\r\n              errorMessage = \"E-mailadressen er allerede i brug.\";\r\n              break;\r\n            case \"auth/operation-not-allowed\":\r\n              errorMessage = \"Operationen er ikke tilladt.\";\r\n              break;\r\n            case \"auth/too-many-requests\":\r\n              errorMessage = \"For mange anmodninger. Prøv igen senere.\";\r\n              break;\r\n            case \"auth/weak-password\":\r\n              errorMessage = \"Kodeordet er for svagt.\";\r\n              break;\r\n            default:\r\n              errorMessage = \"En ukendt fejl opstod. Prøv igen.\";\r\n          }\r\n\r\n          this.$toast.error(errorMessage);\r\n        });\r\n    },\r\n\r\n    isPasswordStrong(password) {\r\n      const regex =\r\n        /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/;\r\n      return regex.test(password);\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n@import url(\"https://fonts.googleapis.com/css?family=Montserrat:400,800\");\r\n\r\n* {\r\n  box-sizing: border-box;\r\n  color: var(--primary-text-color);\r\n}\r\n\r\n.wrapper {\r\n  display: flex;\r\n  width: 100%;\r\n  height: 85vh;\r\n  margin: auto;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\nbody {\r\n  background: var(--primary-bg-color);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  font-family: \"Montserrat\", sans-serif;\r\n  height: 100vh;\r\n  margin: -20px 0 50px;\r\n}\r\n\r\nh1 {\r\n  font-weight: bold;\r\n  margin: 0;\r\n}\r\n\r\nh2 {\r\n  text-align: center;\r\n}\r\n\r\np {\r\n  font-size: 14px;\r\n  font-weight: 100;\r\n  line-height: 20px;\r\n  letter-spacing: 0.5px;\r\n  margin: 20px 0 30px;\r\n}\r\n\r\nspan {\r\n  font-size: 12px;\r\n}\r\n\r\na {\r\n  color: #333;\r\n  font-size: 14px;\r\n  text-decoration: none;\r\n  margin: 15px 0;\r\n}\r\n\r\nbutton {\r\n  border-radius: 20px;\r\n  border: 1px solid #ff4b2b;\r\n  background-color: #ff4b2b;\r\n  color: #ffffff;\r\n  font-size: 12px;\r\n  font-weight: bold;\r\n  padding: 12px 45px;\r\n  letter-spacing: 1px;\r\n  text-transform: uppercase;\r\n  transition: transform 80ms ease-in;\r\n}\r\n\r\nbutton:active {\r\n  transform: scale(0.95);\r\n}\r\n\r\nbutton:focus {\r\n  outline: none;\r\n}\r\n\r\nbutton.ghost {\r\n  background-color: transparent;\r\n  border-color: #ffffff;\r\n}\r\n\r\nform {\r\n  background-color: var(--primary-bg-color);\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  padding: 0 50px;\r\n  height: 100%;\r\n  text-align: center;\r\n}\r\n\r\ninput {\r\n  background-color: var(--input-bg-color);\r\n  border: none;\r\n  padding: 12px 15px;\r\n  margin: 8px 0;\r\n  width: 100%;\r\n}\r\n\r\n.container {\r\n  border-radius: 10px;\r\n  box-shadow: 0 14px 28px rgba(0, 0, 0, 0.25), 0 10px 10px rgba(0, 0, 0, 0.22);\r\n  position: relative;\r\n  overflow: hidden;\r\n  width: 768px;\r\n  max-width: 100%;\r\n  height: 480px;\r\n}\r\n\r\n.form-container {\r\n  position: absolute;\r\n  top: 0;\r\n  height: 100%;\r\n  transition: all 0.6s ease-in-out;\r\n}\r\n\r\n.sign-in-container {\r\n  left: 0;\r\n  width: 50%;\r\n  z-index: 2;\r\n}\r\n\r\n.container.right-panel-active .sign-in-container {\r\n  transform: translateX(100%);\r\n}\r\n\r\n.sign-up-container {\r\n  left: 0;\r\n  width: 50%;\r\n  opacity: 0;\r\n  z-index: 1;\r\n}\r\n\r\n.container.right-panel-active .sign-up-container {\r\n  transform: translateX(100%);\r\n  opacity: 1;\r\n  z-index: 5;\r\n  animation: show 0.6s;\r\n}\r\n\r\n@keyframes show {\r\n  0%,\r\n  49.99% {\r\n    opacity: 0;\r\n    z-index: 1;\r\n  }\r\n\r\n  50%,\r\n  100% {\r\n    opacity: 1;\r\n    z-index: 5;\r\n  }\r\n}\r\n\r\n.overlay-container {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 50%;\r\n  width: 50%;\r\n  height: 100%;\r\n  overflow: hidden;\r\n  transition: transform 0.6s ease-in-out;\r\n  z-index: 100;\r\n}\r\n\r\n.container.right-panel-active .overlay-container {\r\n  transform: translateX(-100%);\r\n}\r\n\r\n.overlay {\r\n  background: #ff416c;\r\n  background: -webkit-linear-gradient(to right, #ff4b2b, #ff416c);\r\n  background: linear-gradient(to right, #ff4b2b, #ff416c);\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n  background-position: 0 0;\r\n  color: #ffffff;\r\n  position: relative;\r\n  left: -100%;\r\n  height: 100%;\r\n  width: 200%;\r\n  transform: translateX(0);\r\n  transition: transform 0.6s ease-in-out;\r\n}\r\n\r\n.container.right-panel-active .overlay {\r\n  transform: translateX(50%);\r\n}\r\n\r\n.overlay-panel {\r\n  position: absolute;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  padding: 0 40px;\r\n  text-align: center;\r\n  top: 0;\r\n  height: 100%;\r\n  width: 50%;\r\n  transform: translateX(0);\r\n  transition: transform 0.6s ease-in-out;\r\n}\r\n\r\n.overlay-left {\r\n  transform: translateX(-20%);\r\n}\r\n\r\n.container.right-panel-active .overlay-left {\r\n  transform: translateX(0);\r\n}\r\n\r\n.overlay-right {\r\n  right: 0;\r\n  transform: translateX(0);\r\n}\r\n\r\n.container.right-panel-active .overlay-right {\r\n  transform: translateX(20%);\r\n}\r\n\r\n.social-container {\r\n  margin: 20px 0;\r\n}\r\n\r\n.social-container a {\r\n  border: 1px solid var(--primary-text-color);\r\n  color: var(--primary-text-color);\r\n  border-radius: 50%;\r\n  display: inline-flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin: 0 5px;\r\n  height: 40px;\r\n  width: 40px;\r\n}\r\n\r\nfooter {\r\n  background-color: #222;\r\n  color: #fff;\r\n  font-size: 14px;\r\n  bottom: 0;\r\n  position: fixed;\r\n  left: 0;\r\n  right: 0;\r\n  text-align: center;\r\n  z-index: 999;\r\n}\r\n\r\nfooter p {\r\n  margin: 10px 0;\r\n}\r\n\r\nfooter i {\r\n  color: red;\r\n}\r\n\r\nfooter a {\r\n  color: #3c97bf;\r\n  text-decoration: none;\r\n}\r\n\r\n#nederenGlemtDitPassword {\r\n  color: var(--primary-text-color);\r\n}\r\n</style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}